// ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
import * as aws from '@pulumi/aws';
import * as pulumi from '@pulumi/pulumi';
import { Access } from '../access';
import { roleNameFromArn } from '../utils';

export interface LambdaFunctionToS3BucketArgs {
  /**
   * The source resource.
   */
  source: aws.lambda.Function;

  /**
   * The target resource.
   */
  target: aws.s3.BucketV2;

  /**
   * The access level for the policy.
   * Can be one of "Read", "Write", or "ReadWrite"
   *
   * @default "Read"
   */
  access?: string;
}

/**
 * Connect a Lambda Function to a S3 Bucket.
 */
export class LambdaFunctionToS3Bucket extends pulumi.ComponentResource {
  constructor(name: string, args: LambdaFunctionToS3BucketArgs, opts?: pulumi.ComponentResourceOptions) {
    super('aws-connectors:index:LambdaFunctionToS3Bucket', name, args, opts);
    const access = args.access ?? Access.READ;

    const readPolicies: aws.iam.PolicyStatement[] = [];
    const writePolicies: aws.iam.PolicyStatement[] = [];
    readPolicies.push(
      {
        Effect: 'Allow',
        Action: [
          's3:GetObject',
          's3:GetObjectAcl',
          's3:GetObjectLegalHold',
          's3:GetObjectRetention',
          's3:GetObjectTorrent',
          's3:GetObjectVersion',
          's3:GetObjectVersionAcl',
          's3:GetObjectVersionForReplication',
          's3:GetObjectVersionTorrent',
          's3:ListBucket',
          's3:ListBucketMultipartUploads',
          's3:ListBucketVersions',
          's3:ListMultipartUploadParts',
        ],
        Resource: [
          pulumi.interpolate`${args.target.arn}`,
          pulumi.interpolate`${args.target.arn}/*`,
        ],
      },
    );
    writePolicies.push(
      {
        Effect: 'Allow',
        Action: [
          's3:AbortMultipartUpload',
          's3:DeleteObject',
          's3:DeleteObjectVersion',
          's3:PutObject',
          's3:PutObjectLegalHold',
          's3:PutObjectRetention',
          's3:RestoreObject',
        ],
        Resource: [
          pulumi.interpolate`${args.target.arn}`,
          pulumi.interpolate`${args.target.arn}/*`,
        ],
      },
    );
    const statements: aws.iam.PolicyStatement[] = [];
    if (access === Access.READ || access === Access.READ_WRITE) {
      statements.push(...readPolicies);
    }
    if (access === Access.WRITE || access === Access.READ_WRITE) {
      statements.push(...writePolicies);
    }
    new aws.iam.RolePolicy(`${name}-policy`, {
      role: roleNameFromArn(args.source.role),
      policy: {
        Version: '2012-10-17',
        Statement: statements,
      }
    }, { parent: this });
    this.registerOutputs({});
  }
}