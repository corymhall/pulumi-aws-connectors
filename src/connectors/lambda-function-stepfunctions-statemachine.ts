// ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
import * as aws from '@pulumi/aws';
import * as pulumi from '@pulumi/pulumi';
import { Access } from '../access';

export interface LambdaFunctionToSfnStateMachineConnectorArgs {
  /**
   * The source resource.
   */
  source: aws.lambda.Function;

  /**
   * The target resource.
   */
  target: aws.sfn.StateMachine;

  /**
   * The access level for the policy.
   *
   * @default Access.READ
   */
  access?: Access;
}

/**
 * Connect a Lambda Function to a StepFunctions StateMachine.
 */
export class LambdaFunctionToSfnStateMachineConnector extends pulumi.ComponentResource {
  constructor(name: string, args: LambdaFunctionToSfnStateMachineConnectorArgs, opts?: pulumi.ComponentResourceOptions) {
    super('aws-connectors:index:LambdaFunctionToSfnStateMachineConnector', name, args, opts);
    const access = args.access ?? Access.READ;

    const readPolicies: aws.iam.PolicyStatement[] = [];
    const writePolicies: aws.iam.PolicyStatement[] = [];
    readPolicies.push(
      {
        Effect: 'Allow',
        Action: [
          'states:DescribeStateMachine',
          'states:ListExecutions',
        ],
        Resource: [
          pulumi.interpolate`${args.target.arn}`,
        ],
      },
      {
        Effect: 'Allow',
        Action: [
          'states:DescribeExecution',
          'states:DescribeStateMachineForExecution',
          'states:GetExecutionHistory',
        ],
        Resource: [
          pulumi.interpolate`arn:${aws.getPartitionOutput({}, opts).partition}:states:${aws.getRegionOutput({}, opts).name}:${aws.getCallerIdentityOutput({}, opts).accountId}:execution:${args.target.name}:*`,
        ],
      },
    );
    writePolicies.push(
      {
        Effect: 'Allow',
        Action: [
          'states:StartExecution',
          'states:StartSyncExecution',
        ],
        Resource: [
          pulumi.interpolate`${args.target.arn}`,
        ],
      },
      {
        Effect: 'Allow',
        Action: [
          'states:StopExecution',
        ],
        Resource: [
          pulumi.interpolate`arn:${aws.getPartitionOutput({}, opts).partition}:states:${aws.getRegionOutput({}, opts).name}:${aws.getCallerIdentityOutput({}, opts).accountId}:execution:${args.target.name}:*`,
        ],
      },
    );
    const statements: aws.iam.PolicyStatement[] = [];
    if (access === Access.READ || access === Access.READ_WRITE) {
      statements.push(...readPolicies);
    }
    if (access === Access.WRITE || access === Access.READ_WRITE) {
      statements.push(...writePolicies);
    }
    new aws.iam.RolePolicy(`${name}-policy`, {
      role: args.source.role,
      policy: {
        Version: '2012-10-17',
        Statement: statements,
      }
    }, opts);
    this.registerOutputs({});
  }
}